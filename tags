!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CstrToString	string/string.c	/^String *CstrToString(char *cstr)$/;"	f
INITIAL_CAPACITY	string/string.h	/^#define INITIAL_CAPACITY /;"	d
LOG	common.h	/^#define LOG(/;"	d
MAX	string/string.h	/^#define MAX(/;"	d
MIN	string/string.h	/^#define MIN(/;"	d
OBJS	Makefile	/^OBJS=json.o$/;"	m
String	string/string.h	/^} String;$/;"	t	typeref:struct:_String
StringAdd	string/string.c	/^void StringAdd(String *this, char c)$/;"	f
StringAppend	string/string.c	/^void StringAppend(String *this, const String *other)$/;"	f
StringCapacity	string/string.c	/^size_t StringCapacity(const String *this)$/;"	f
StringConstructor	string/string.c	/^String *StringConstructor(size_t n)$/;"	f
StringDestructor	string/string.c	/^void StringDestructor(String *this)$/;"	f
StringReserve	string/string.c	/^void StringReserve(String *this, size_t capacity)$/;"	f
StringResize	string/string.c	/^void StringResize(String *this, size_t size)$/;"	f
StringSize	string/string.c	/^size_t StringSize(const String *this)$/;"	f
StringSlice	string/string.c	/^char *StringSlice(String *this, size_t start, size_t end)$/;"	f
StringToCstr	string/string.c	/^char *StringToCstr(String *this)$/;"	f
TARGET	Makefile	/^TARGET=main$/;"	m
_GetCapacity	string/string.c	/^size_t _GetCapacity(size_t n)$/;"	f
_String	string/string.h	/^typedef struct _String$/;"	s
_json_array_t	json.h	/^typedef struct _json_array_t$/;"	s
_json_base_t	json.h	/^typedef struct _json_base_t$/;"	s
_json_node_t	json.h	/^typedef struct _json_node_t$/;"	s
_json_object_t	json.h	/^typedef struct _json_object_t$/;"	s
_json_parse_string	json.c	/^json_t *_json_parse_string(char *str, size_t j)$/;"	f
_json_t	json.h	/^typedef struct _json_t$/;"	s
_json_type	json.h	/^typedef enum _json_type$/;"	g
buffer	string/string.h	/^	char *buffer;$/;"	m	struct:_String
capacity	string/string.h	/^	size_t capacity;$/;"	m	struct:_String
check_string	string/main.c	/^void check_string(String *s, char *value, size_t size)$/;"	f
check_string_append	string/main.c	/^void check_string_append(char *s1, char *s2)$/;"	f
head	json.h	/^	json_node_t *head;$/;"	m	struct:_json_t
json_add	json.c	/^void json_add(json_t *json, json_base_t *elem)$/;"	f
json_array_add	json.c	/^void json_array_add(json_array_t *json, json_array_t *entry)$/;"	f
json_array_clone	json.c	/^json_array_t *json_array_clone(json_array_t *array)$/;"	f
json_array_create	json.c	/^json_array_t *json_array_create()$/;"	f
json_array_free	json.c	/^void json_array_free(json_array_t *array)$/;"	f
json_array_get	json.c	/^json_array_t *json_array_get(json_array_t *arr, size_t index)$/;"	f
json_array_iterator	json.h	/^#define json_array_iterator(/;"	d
json_array_remove	json.c	/^void json_array_remove(json_array_t *json, size_t index)$/;"	f
json_array_size	json.c	/^size_t json_array_size(json_array_t *arr)$/;"	f
json_array_t	json.h	/^} json_array_t;$/;"	t	typeref:struct:_json_array_t
json_base_t	json.h	/^} json_base_t;$/;"	t	typeref:struct:_json_base_t
json_clone	json.c	/^json_t *json_clone(json_t *json)$/;"	f
json_create	json.c	/^json_t *json_create()$/;"	f
json_free	json.c	/^void json_free(json_t *json)$/;"	f
json_from	util.c	/^json_t *json_from(void *value, json_type type, int shallow)$/;"	f
json_node_t	json.h	/^} json_node_t;$/;"	t	typeref:struct:_json_node_t
json_object_clone	json.c	/^json_object_t *json_object_clone(json_object_t *obj)$/;"	f
json_object_create	json.c	/^json_object_t *json_object_create()$/;"	f
json_object_free	json.c	/^void json_object_free(json_object_t *obj)$/;"	f
json_object_get	json.c	/^json_t *json_object_get(json_object_t *obj, const char *key)$/;"	f
json_object_iterator	json.h	/^#define json_object_iterator(/;"	d
json_object_set	json.c	/^void json_object_set(json_object_t *obj, const char *key, json_t *value, bool shallow_copy)$/;"	f
json_object_t	json.h	/^} json_object_t;$/;"	t	typeref:struct:_json_object_t
json_ptr	json.h	/^	void *json_ptr;$/;"	m	struct:_json_base_t
json_to_string	json.c	/^char *json_to_string(json_t *json)$/;"	f
json_type	json.h	/^	json_type_t json_type;$/;"	m	struct:_json_base_t
json_type	json.h	/^} json_type;$/;"	t	typeref:enum:_json_type
json_type_array	json.h	/^    json_type_array,$/;"	e	enum:_json_type
json_type_null	json.h	/^    json_type_null,$/;"	e	enum:_json_type
json_type_object	json.h	/^    json_type_object,$/;"	e	enum:_json_type
json_type_string	json.h	/^    json_type_string$/;"	e	enum:_json_type
key	json.h	/^    char *key;$/;"	m	struct:_json_object_t
main	main.c	/^int main(int argc, char *argv[])$/;"	f
main	string/main.c	/^int main()$/;"	f
main	test.c	/^int main(int argc, char *argv[])$/;"	f
next	json.h	/^	struct _json_node_t *next;$/;"	m	struct:_json_node_t	typeref:struct:_json_node_t::_json_node_t
next	json.h	/^    struct _json_array_t *next;$/;"	m	struct:_json_array_t	typeref:struct:_json_array_t::_json_array_t
next	json.h	/^    struct _json_object_t *next;$/;"	m	struct:_json_object_t	typeref:struct:_json_object_t::_json_object_t
size	json.h	/^	size_t size;$/;"	m	struct:_json_t
size	string/string.h	/^	size_t size;$/;"	m	struct:_String
tail	json.h	/^	json_node_t *tail;$/;"	m	struct:_json_t
value	json.h	/^	json_base_t *value;$/;"	m	struct:_json_node_t
value	json.h	/^    struct _json_t *value;$/;"	m	struct:_json_array_t	typeref:struct:_json_array_t::_json_t
value	json.h	/^    struct _json_t *value;$/;"	m	struct:_json_object_t	typeref:struct:_json_object_t::_json_t
wrap_json_array	util.c	/^json_t *wrap_json_array(json_array_t *array)$/;"	f
wrap_json_object	util.c	/^json_t *wrap_json_object(json_object_t *object)$/;"	f
