!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIGN_SIZE	sstring.c	/^#define ALIGN_SIZE(/;"	d	file:
BLOCK_SIZE	sstring.c	/^#define BLOCK_SIZE /;"	d	file:
GROWTH_FACTOR	sstring.c	/^#define GROWTH_FACTOR /;"	d	file:
GROWTH_FACTOR	vector.c	/^const size_t GROWTH_FACTOR = 2;$/;"	v
INITIAL_CAPACITY	sstring.c	/^#define INITIAL_CAPACITY /;"	d	file:
INITIAL_CAPACITY	vector.c	/^const size_t INITIAL_CAPACITY = 8;$/;"	v
LOG	common.h	/^#define LOG(/;"	d
MAX	sstring.c	/^#define MAX(/;"	d	file:
MAX	vector.c	/^#define MAX(/;"	d	file:
MIN	sstring.c	/^#define MIN(/;"	d	file:
MIN	vector.c	/^#define MIN(/;"	d	file:
OBJS	Makefile	/^OBJS=json.o sstring.o vector.o callbacks.o$/;"	m
_GNU_SOURCE	sstring.c	/^#define _GNU_SOURCE$/;"	d	file:
_json_array_t	json.h	/^typedef struct _json_array_t$/;"	s
_json_obect_t	json.h	/^typedef struct _json_obect_t$/;"	s
array	vector.c	/^    void **array;$/;"	m	struct:vector	file:
buffer	sstring.c	/^    char *buffer; \/* string buffer *\/$/;"	m	struct:sstring	file:
capacity	sstring.c	/^    size_t capacity; \/* buffer size *\/$/;"	m	struct:sstring	file:
capacity	vector.c	/^    size_t capacity;$/;"	m	struct:vector	file:
char_copy_constructor	callbacks.c	/^void *char_copy_constructor(void *elem) {$/;"	f
char_default_constructor	callbacks.c	/^void *char_default_constructor(void) {$/;"	f
char_destructor	callbacks.c	/^void char_destructor(void *elem) {$/;"	f
char_hash_function	callbacks.c	/^size_t char_hash_function(void *elem) {$/;"	f
char_vector_create	vector.c	/^vector *char_vector_create()$/;"	f
copy_constructor	vector.c	/^    copy_constructor_type copy_constructor;$/;"	m	struct:vector	file:
copy_constructor_type	callbacks.h	/^typedef void *(*copy_constructor_type)(void *elem);$/;"	t
cstr_to_sstring	sstring.c	/^sstring *cstr_to_sstring(const char *input) {$/;"	f
default_constructor	vector.c	/^    default_constructor_type default_constructor;$/;"	m	struct:vector	file:
default_constructor_type	callbacks.h	/^typedef void *(*default_constructor_type)(void);$/;"	t
destructor	vector.c	/^    destructor_type destructor;$/;"	m	struct:vector	file:
destructor_type	callbacks.h	/^typedef void (*destructor_type)(void *elem);$/;"	t
double_copy_constructor	callbacks.c	/^void *double_copy_constructor(void *elem) {$/;"	f
double_default_constructor	callbacks.c	/^void *double_default_constructor(void) {$/;"	f
double_destructor	callbacks.c	/^void double_destructor(void *elem) {$/;"	f
double_hash_function	callbacks.c	/^size_t double_hash_function(void *elem) {$/;"	f
double_vector_create	vector.c	/^vector *double_vector_create()$/;"	f
find_substring_index	sstring.c	/^ssize_t find_substring_index(char *src, size_t n1, char *target, size_t n2)$/;"	f
float_copy_constructor	callbacks.c	/^void *float_copy_constructor(void *elem) {$/;"	f
float_default_constructor	callbacks.c	/^void *float_default_constructor(void) {$/;"	f
float_destructor	callbacks.c	/^void float_destructor(void *elem) {$/;"	f
float_hash_function	callbacks.c	/^size_t float_hash_function(void *elem) {$/;"	f
float_vector_create	vector.c	/^vector *float_vector_create()$/;"	f
get_new_capacity	vector.c	/^static size_t get_new_capacity(size_t target)$/;"	f	file:
hash_function_type	callbacks.h	/^typedef size_t (*hash_function_type)(void *elem);$/;"	t
int_copy_constructor	callbacks.c	/^void *int_copy_constructor(void *elem) {$/;"	f
int_default_constructor	callbacks.c	/^void *int_default_constructor(void) {$/;"	f
int_destructor	callbacks.c	/^void int_destructor(void *elem) {$/;"	f
int_hash_function	callbacks.c	/^size_t int_hash_function(void *elem) {$/;"	f
int_vector_create	vector.c	/^vector *int_vector_create()$/;"	f
int_vector_print	vector.c	/^void int_vector_print(vector *this)$/;"	f
json_array_free	json.c	/^void json_array_free(json_t *json) {$/;"	f
json_array_t	json.h	/^} json_array_t;$/;"	t	typeref:struct:_json_array_t
json_create	json.c	/^json_t *json_create() {$/;"	f
json_empty	json.c	/^json_t *json_empty() {$/;"	f
json_free	json.c	/^void json_free(json_t *json) {$/;"	f
json_object_free	json.c	/^void json_object_free(json_t *json) {$/;"	f
json_object_t	json.h	/^} json_object_t;$/;"	t	typeref:struct:_json_obect_t
json_string_create	json.c	/^json_t *json_string_create(char *content) {$/;"	f
json_string_free	json.c	/^void json_string_free(json_t *json) {$/;"	f
json_t	json.h	/^typedef struct json_t$/;"	s
json_t	json.h	/^} json_t;$/;"	t	typeref:struct:json_t
json_type	json.h	/^typedef enum json_type$/;"	g
json_type	json.h	/^} json_type;$/;"	t	typeref:enum:json_type
json_type_array	json.h	/^    json_type_array,$/;"	e	enum:json_type
json_type_null	json.h	/^    json_type_null,$/;"	e	enum:json_type
json_type_object	json.h	/^    json_type_object,$/;"	e	enum:json_type
json_type_string	json.h	/^    json_type_string$/;"	e	enum:json_type
key	json.h	/^    char *key;$/;"	m	struct:_json_obect_t
long_copy_constructor	callbacks.c	/^void *long_copy_constructor(void *elem) {$/;"	f
long_default_constructor	callbacks.c	/^void *long_default_constructor(void) {$/;"	f
long_destructor	callbacks.c	/^void long_destructor(void *elem) {$/;"	f
long_hash_function	callbacks.c	/^size_t long_hash_function(void *elem) {$/;"	f
long_vector_create	vector.c	/^vector *long_vector_create()$/;"	f
main	example-1.c	/^int main(int argc, char *argv[])$/;"	f
main	main.c	/^int main(int argc, char *argv[])$/;"	f
main	sstring_test.c	/^int main()$/;"	f
next	json.h	/^    struct _json_array_t *next;$/;"	m	struct:_json_array_t	typeref:struct:_json_array_t::_json_array_t
next	json.h	/^    struct _json_object_t *next;$/;"	m	struct:_json_obect_t	typeref:struct:_json_obect_t::_json_object_t
pointer_hash_function	callbacks.c	/^size_t pointer_hash_function(void *elem) {$/;"	f
print_string	sstring_test.c	/^void print_string(void *elem) {$/;"	f
shallow_copy_constructor	callbacks.c	/^void *shallow_copy_constructor(void *elem) {$/;"	f
shallow_default_constructor	callbacks.c	/^void *shallow_default_constructor(void) {$/;"	f
shallow_destructor	callbacks.c	/^void shallow_destructor(void *elem) {$/;"	f
shallow_hash_function	callbacks.c	/^size_t shallow_hash_function(void *elem) {$/;"	f
shallow_vector_create	vector.c	/^vector *shallow_vector_create()$/;"	f
short_copy_constructor	callbacks.c	/^void *short_copy_constructor(void *elem) {$/;"	f
short_default_constructor	callbacks.c	/^void *short_default_constructor(void) {$/;"	f
short_destructor	callbacks.c	/^void short_destructor(void *elem) {$/;"	f
short_hash_function	callbacks.c	/^size_t short_hash_function(void *elem) {$/;"	f
short_vector_create	vector.c	/^vector *short_vector_create()$/;"	f
size	sstring.c	/^    size_t size; \/* strlen(buffer) *\/$/;"	m	struct:sstring	file:
size	vector.c	/^    size_t size;$/;"	m	struct:vector	file:
sstring	sstring.c	/^struct sstring {$/;"	s	file:
sstring	sstring.h	/^typedef struct sstring sstring;$/;"	t	typeref:struct:sstring
sstring_append	sstring.c	/^int sstring_append(sstring *this, sstring *addition) {$/;"	f
sstring_capacity	sstring.c	/^size_t sstring_capacity(sstring*ss){$/;"	f
sstring_cmp	sstring.c	/^int sstring_cmp(sstring *s, const char *str)$/;"	f
sstring_copy_constructor	sstring.c	/^void *sstring_copy_constructor(void *elem) {$/;"	f
sstring_default_constructor	sstring.c	/^void *sstring_default_constructor(void) {$/;"	f
sstring_destroy	sstring.c	/^void sstring_destroy(sstring *this) {$/;"	f
sstring_destructor	sstring.c	/^void sstring_destructor(void *elem) {$/;"	f
sstring_equals	sstring.c	/^int sstring_equals(sstring *s1, sstring *s2)$/;"	f
sstring_get_buffer	sstring.c	/^char *sstring_get_buffer(sstring *ss){$/;"	f
sstring_print	sstring.c	/^void sstring_print(sstring *ss){$/;"	f
sstring_putc	sstring.c	/^void sstring_putc(sstring *ss, char c)$/;"	f
sstring_size	sstring.c	/^size_t sstring_size(sstring*ss){$/;"	f
sstring_slice	sstring.c	/^char *sstring_slice(sstring *this, int start, int end) {$/;"	f
sstring_split	sstring.c	/^vector *sstring_split(sstring *this, char delimiter) {$/;"	f
sstring_substitute	sstring.c	/^int sstring_substitute(sstring *this, size_t offset, char *target,$/;"	f
sstring_to_cstr	sstring.c	/^char *sstring_to_cstr(sstring *input) {$/;"	f
string_copy_constructor	callbacks.c	/^void *string_copy_constructor(void *elem) {$/;"	f
string_default_constructor	callbacks.c	/^void *string_default_constructor(void) {$/;"	f
string_destructor	callbacks.c	/^void string_destructor(void *elem) {$/;"	f
string_hash_function	callbacks.c	/^size_t string_hash_function(void *elem) {$/;"	f
string_vector_create	vector.c	/^vector *string_vector_create()$/;"	f
test_is_valid_sstring	sstring.c	/^int test_is_valid_sstring(sstring *s){$/;"	f
test_is_valid_sstring_index	sstring.c	/^int test_is_valid_sstring_index(sstring *s, size_t i)$/;"	f
type	json.h	/^    json_type type;$/;"	m	struct:json_t
unsigned_char_copy_constructor	callbacks.c	/^void *unsigned_char_copy_constructor(void *elem) {$/;"	f
unsigned_char_default_constructor	callbacks.c	/^void *unsigned_char_default_constructor(void) {$/;"	f
unsigned_char_destructor	callbacks.c	/^void unsigned_char_destructor(void *elem) {$/;"	f
unsigned_char_hash_function	callbacks.c	/^size_t unsigned_char_hash_function(void *elem) {$/;"	f
unsigned_char_vector_create	vector.c	/^vector *unsigned_char_vector_create()$/;"	f
unsigned_int_copy_constructor	callbacks.c	/^void *unsigned_int_copy_constructor(void *elem) {$/;"	f
unsigned_int_default_constructor	callbacks.c	/^void *unsigned_int_default_constructor(void) {$/;"	f
unsigned_int_destructor	callbacks.c	/^void unsigned_int_destructor(void *elem) {$/;"	f
unsigned_int_hash_function	callbacks.c	/^size_t unsigned_int_hash_function(void *elem) {$/;"	f
unsigned_int_vector_create	vector.c	/^vector *unsigned_int_vector_create()$/;"	f
unsigned_long_copy_constructor	callbacks.c	/^void *unsigned_long_copy_constructor(void *elem) {$/;"	f
unsigned_long_default_constructor	callbacks.c	/^void *unsigned_long_default_constructor(void) {$/;"	f
unsigned_long_destructor	callbacks.c	/^void unsigned_long_destructor(void *elem) {$/;"	f
unsigned_long_hash_function	callbacks.c	/^size_t unsigned_long_hash_function(void *elem) {$/;"	f
unsigned_long_vector_create	vector.c	/^vector *unsigned_long_vector_create()$/;"	f
unsigned_short_copy_constructor	callbacks.c	/^void *unsigned_short_copy_constructor(void *elem) {$/;"	f
unsigned_short_default_constructor	callbacks.c	/^void *unsigned_short_default_constructor(void) {$/;"	f
unsigned_short_destructor	callbacks.c	/^void unsigned_short_destructor(void *elem) {$/;"	f
unsigned_short_hash_function	callbacks.c	/^size_t unsigned_short_hash_function(void *elem) {$/;"	f
unsigned_short_vector_create	vector.c	/^vector *unsigned_short_vector_create()$/;"	f
value	json.h	/^    json_t *value;$/;"	m	struct:_json_array_t
value	json.h	/^    json_t *value;$/;"	m	struct:_json_obect_t
value	json.h	/^    void *value;$/;"	m	struct:json_t
vector	vector.c	/^struct vector$/;"	s	file:
vector	vector.h	/^typedef struct vector vector;$/;"	t	typeref:struct:vector
vector_at	vector.c	/^void **vector_at(vector *this, size_t position)$/;"	f
vector_back	vector.c	/^void **vector_back(vector *this)$/;"	f
vector_begin	vector.c	/^void **vector_begin(vector *this)$/;"	f
vector_capacity	vector.c	/^size_t vector_capacity(vector *this)$/;"	f
vector_clear	vector.c	/^void vector_clear(vector *this)$/;"	f
vector_create	vector.c	/^vector *vector_create(copy_constructor_type copy_constructor,$/;"	f
vector_destroy	vector.c	/^void vector_destroy(vector *this)$/;"	f
vector_empty	vector.c	/^bool vector_empty(vector *this)$/;"	f
vector_end	vector.c	/^void **vector_end(vector *this)$/;"	f
vector_erase	vector.c	/^void vector_erase(vector *this, size_t position)$/;"	f
vector_front	vector.c	/^void **vector_front(vector *this)$/;"	f
vector_get	vector.c	/^void *vector_get(vector *this, size_t position)$/;"	f
vector_index	vector.c	/^void **vector_index(vector *v, size_t i)$/;"	f
vector_insert	vector.c	/^void vector_insert(vector *this, size_t position, void *element)$/;"	f
vector_pop_back	vector.c	/^void vector_pop_back(vector *this)$/;"	f
vector_print	vector.c	/^void vector_print(vector *this, void (*printer)(void *elem))$/;"	f
vector_push_back	vector.c	/^void vector_push_back(vector *this, void *element)$/;"	f
vector_reserve	vector.c	/^void vector_reserve(vector *this, size_t n)$/;"	f
vector_resize	vector.c	/^void vector_resize(vector *this, size_t n)$/;"	f
vector_set	vector.c	/^void vector_set(vector *this, size_t position, void *element)$/;"	f
vector_size	vector.c	/^size_t vector_size(vector *this)$/;"	f
